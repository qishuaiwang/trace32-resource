LOCAL &mem_tpye
&mem_tpye="EZAXI"
LOCAL &set &clr
&set=0x1000
&clr=0x2000
LOCAL &AON_PATH &ADD_TO_ADDR &SP_BOOT_ADDR
;&SP_BOOT_ADDR=0x00800000
&SP_BOOT_ADDR=0x50000000
IF (CPUIS64BIT())
(
	&AON_PATH=0x800000000
)
ELSE
(
	&AON_PATH=0x00000000
	&mem_tpye="&(mem_tpye):8"
)
&ADD_TO_ADDR=&AON_PATH

LOCAL &cmd &p1 &p2 &p3 &p4 &p5 &p6 &p7 &p8 &p9
ENTRY &cmd &p1 &p2 &p3 &p4 &p5 &p6 &p7 &p8 &p9

GOSUB &cmd &p1 &p2 &p3 &p4 &p5 &p6 &p7 &p8 &p9
LOCAL &rp1 &rp2 &rp3 &rp4 &rp5 &rp6 &rp7 &rp8 &rp9
ENTRY &rp1 &rp2 &rp3 &rp4 &rp5 &rp6 &rp7 &rp8 &rp9
ENDDO &rp1 &rp2 &rp3 &rp4 &rp5 &rp6 &rp7 &rp8 &rp9

AP_CORE_BOOT:
    LOCAL &boot_vect &core_id &wait
    ENTRY &core_id &wait

    IF "X&core_id"=="X"
		&core_id=1
    
    IF "X&wait"=="X"
		&wait=0    
    
    D.S &mem_tpye:(0x200+&ADD_TO_ADDR) %LE %Long 0x14000000
    &boot_vect=0x000
    
	IF (&wait!=0)
    (
        IF ((&core_id!=0)&&(DATA.LONG(EDAP:(0x83010314+(&core_id*0x100000)))&0x1)==0x1)
        (
            LOCAL &yes
            DIALOG.YESNO "core(&core_id) Already booted! Do you want to BOOT anyway?"
            ENTRY &yes
            IF (!&yes)
            (
                RETURN
            )
        )
    
        D.S &mem_tpye:((&boot_vect+(&core_id*0x100)+0x00)+&ADD_TO_ADDR) %LE %Long 0x18000081
        D.S &mem_tpye:((&boot_vect+(&core_id*0x100)+0x04)+&ADD_TO_ADDR) %LE %Long 0x18000080
        D.S &mem_tpye:((&boot_vect+(&core_id*0x100)+0x08)+&ADD_TO_ADDR) %LE %Long 0xB9000020
        D.S &mem_tpye:((&boot_vect+(&core_id*0x100)+0x0C)+&ADD_TO_ADDR) %LE %Long 0x14000000
        D.S &mem_tpye:((&boot_vect+(&core_id*0x100)+0x10)+&ADD_TO_ADDR) %LE %Long (&boot_vect+(&core_id*0x100)+0x20)
        D.S &mem_tpye:((&boot_vect+(&core_id*0x100)+0x14)+&ADD_TO_ADDR) %LE %Long 0xA5A5A5A5
        D.S &mem_tpye:((&boot_vect+(&core_id*0x100)+0x20)+&ADD_TO_ADDR) %LE %Long 0x0
        
        D.S &mem_tpye:(0x32880040+(&core_id*0x4)+&ADD_TO_ADDR) %LE %Long ((&boot_vect+(&core_id*0x100))>>2)    
    )
    ELSE
    (
		D.S &mem_tpye:(&boot_vect+&ADD_TO_ADDR) %LE %Long 0x14000000
		; RVBARADDR
		D.S &mem_tpye:(0x32880040+(&core_id*0x4)+&ADD_TO_ADDR) %LE %Long (&boot_vect>>2)
    )
    
	; CPU TOP force on
	D.S &mem_tpye:(0x327E0000+&clr+&ADD_TO_ADDR) %LE %Long (0x3<<24.)
    
    IF (&core_id==3)
    (
        ; CA55 C3 force on
        D.S &mem_tpye:(0x327E0370+&clr+&ADD_TO_ADDR) %LE %Long (0x3<<24.)
    )
    ELSE
    (
    	; CA55 C0-C2 force on
        D.S &mem_tpye:(0x327E0004+(&core_id*0x4)+&clr+&ADD_TO_ADDR) %LE %Long (0x3<<24.)
    )
    
    IF ((&core_id!=0)&&(&wait!=0))
    (
		PRINT "Waiting core(&core_id) Boot ..."
        
        WHILE (DATA.LONG(&mem_tpye:((&boot_vect+(&core_id*0x100)+0x20)+&ADD_TO_ADDR))!=0xA5A5A5A5)
        (
            WAIT 1.MS
        )
        PRINT "core(&core_id) Booted!"
    )

    RETURN
    
AP_MP_CORE_BOOT:
	LOCAL &boot_vect &core &core_num &core_id &wait
	ENTRY &core_num &core_id &wait
    
	IF "X&core_num"=="X"
		&core_num=1

    IF "X&core_id"=="X"
		&core_id=1

    IF "X&wait"=="X"
		&wait=0        
    
    IF (&core_num==1)
    (
        GOSUB AP_CORE_BOOT &core_id &wait
    )
    ELSE
    (
        PRINT "Waiting Boot ..."
        
        &core=0
        WHILE (&core<&core_num)
        (
            GOSUB AP_CORE_BOOT &core &wait
            &core=&core+1
        )
        
        PRINT "Boot Done!"
    )

	RETURN

CR5_BOOT:
	LOCAL &boot_vect &wait &cr5_boot_vect
	ENTRY &wait
	IF "X&wait"=="X"
		&wait=0
	&boot_vect=0x00004400
	&cr5_boot_vect=0x000
	IF ((DATA.LONG(EDAP:0x80030314)&0x1)==0x1)
	(
		LOCAL &yes
		DIALOG.YESNO "PUBCP Already booted! Do you want to BOOT anyway?"
		ENTRY &yes
		IF (!&yes)
		(
			RETURN
		)
	)
	GOSUB DISABLE_FIREWALL
	; PUBCP Core soft reset
	D.S &mem_tpye:(0x327D0174+&set+&ADD_TO_ADDR) %LE %Long 1<<10. 

	; While(1) @ 0x000
	IF (&wait!=0)
	(
		D.S &mem_tpye:(&boot_vect+0x00+&ADD_TO_ADDR) %LE %Long 0xE59F1008
		D.S &mem_tpye:(&boot_vect+0x04+&ADD_TO_ADDR) %LE %Long 0xE59F0008
		D.S &mem_tpye:(&boot_vect+0x08+&ADD_TO_ADDR) %LE %Long 0xE5801000
		D.S &mem_tpye:(&boot_vect+0x0C+&ADD_TO_ADDR) %LE %Long 0xEAFFFFFE
		D.S &mem_tpye:(&boot_vect+0x10+&ADD_TO_ADDR) %LE %Long 0xA5A5A5A5
		D.S &mem_tpye:(&boot_vect+0x14+&ADD_TO_ADDR) %LE %Long (&cr5_boot_vect+0x20)
		D.S &mem_tpye:(&boot_vect+0x20+&ADD_TO_ADDR) %LE %Long 0x0
	)
	ELSE
	(
		D.S &mem_tpye:(&boot_vect+&ADD_TO_ADDR) %LE %Long 0xEAFFFFFE
	)

	; PUBCP SYS force on
	D.S &mem_tpye:(0x327E0058+&clr+&ADD_TO_ADDR) %LE %Long 0x3<<24. 

	; PUBCP Sleep CTRL
	D.S &mem_tpye:(0x327E00CC+&clr+&ADD_TO_ADDR) %LE %Long 1<<18.

	; PUBCP SYS soft reset
	D.S &mem_tpye:(0x327E00B0+&clr+&ADD_TO_ADDR) %LE %Long 1<<1.

	; PUBCP Core soft reset
	D.S &mem_tpye:(0x327D0174+&clr+&ADD_TO_ADDR) %LE %Long 1<<10. 
	IF (&wait!=0)
	(
		PRINT "Waiting Boot ..."
		WHILE (DATA.LONG(&mem_tpye:(&boot_vect+0x20+&ADD_TO_ADDR))!=0xA5A5A5A5)
		(
			WAIT 1.MS
		)
		PRINT "Boot Done!"
	)
	RETURN

CM4_BOOT:
	; 3: AON CM4
	LOCAL &AHB_PORT
	LOCAL &boot_vect &wait &sp_boot_vect
	ENTRY &AHB_PORT &wait
	IF "X&wait"=="X"
		&wait=0
	&boot_vect=&SP_BOOT_ADDR
	&sp_boot_vect=0x000

	IF (&AHB_PORT==3)
	(; 3: AON CM4
		IF ((DATA.LONG(&mem_tpye:(0x327E00D4+&ADD_TO_ADDR))&(0xF<<20.))!=0x0)
		(
			LOCAL &yes
			DIALOG.YESNO "SP Already booted! Do you want to BOOT anyway?"
			ENTRY &yes
			IF (!&yes)
			(
				RETURN
			)
		)
		; CM4 Core soft reset
		D.S &mem_tpye:(0x327D008C+&set+&ADD_TO_ADDR) %LE %Long (1<<0.)

		; CM4 SYS soft reset
		D.S &mem_tpye:(0x327E00B0+&clr+&ADD_TO_ADDR) %LE %Long 1<<8.
		; CM4 Sleep CTRL
		D.S &mem_tpye:(0x327E00CC+&clr+&ADD_TO_ADDR) %LE %Long 1<<20.

		; CM4 SYS soft reset
		D.S &mem_tpye:(0x327D008C+&clr+&ADD_TO_ADDR) %LE %Long (1<<4.)

		; While(1) @ 0x000
		IF (&wait!=0)
		(
			D.S &mem_tpye:(&boot_vect+0x0004+&ADD_TO_ADDR) %LE %Long 0x00000101
			D.S &mem_tpye:(&boot_vect+0x0100+&ADD_TO_ADDR) %LE %Long 0x48044903
			D.S &mem_tpye:(&boot_vect+0x0104+&ADD_TO_ADDR) %LE %Long 0xBF006001
			D.S &mem_tpye:(&boot_vect+0x0108+&ADD_TO_ADDR) %LE %Long 0xBF00BF00
			D.S &mem_tpye:(&boot_vect+0x010C+&ADD_TO_ADDR) %LE %Long 0xE7FABF00
			D.S &mem_tpye:(&boot_vect+0x0110+&ADD_TO_ADDR) %LE %Long 0xA5A5A5A5
			D.S &mem_tpye:(&boot_vect+0x0114+&ADD_TO_ADDR) %LE %Long (&sp_boot_vect+0x120)
			D.S &mem_tpye:(&boot_vect+0x0120+&ADD_TO_ADDR) %LE %Long 0x0
		)
		ELSE
		(
			D.S &mem_tpye:(&boot_vect+0x0000+&ADD_TO_ADDR) %LE %Long 0xE7FEE7FE
			D.S &mem_tpye:(&boot_vect+0x0004+&ADD_TO_ADDR) %LE %Long 0x00000001
		)

		; CM4 Core soft reset
		D.S &mem_tpye:(0x327D008C+&clr+&ADD_TO_ADDR) %LE %Long (1<<0.)
		IF (&wait!=0)
		(
			PRINT "Waiting Boot ..."
			WHILE (DATA.LONG(&mem_tpye:(&boot_vect+0x120+&ADD_TO_ADDR))!=0xA5A5A5A5)
			(
				WAIT 1.MS
			)
			PRINT "Boot Done!"
		)
	)
	RETURN

DSP_BOOT:
	ENTRY &wait
	IF "X&wait"=="X"
		&wait=0
	LOCAL &AON_BASE &IRAM_BASE
	LOCAL &LDSP_OFFSET &TGDSP_OFFSET &AGDSP_OFFSET
	
	&LDSP_OFFSET=0x0 
	&TGDSP_OFFSET=0x100 
	&AGDSP_OFFSET=0x200
	
	&AON_BASE=(0x32000000+&ADD_TO_ADDR)
	&IRAM_BASE=(0x00005400+&ADD_TO_ADDR)
	IF ((DATA.LONG(&mem_tpye:(&AON_BASE+0x007E00C4))&(0x1F))==0)
	(
		LOCAL &yes
		DIALOG.YESNO "WTLCP Already booted! Do you want to BOOT anyway?"
		ENTRY &yes
		IF (!&yes)
		(
			RETURN
		)
	)
	GOSUB DISABLE_FIREWALL
	ON ERROR CONTinue	
	
	IF (FALSE()==STRing.ComPare(STRing.LoWeR("&mem_tpye"),"*axi*"))
	(
		IF (CPUFAMILY()=="ARM")
		(
			IF (CPU()=="CortexR5")
				&AON_BASE=0x02000000
				&IRAM_BASE=0x00001000
		)
		ELSE
		(
			PRINT %ERROR "We can't support use this to boot DSP"
			ON ERROR
			RETURN
		)
	)
	ON ERROR
	; WTLCP Core soft reset
	D.S &mem_tpye:&AON_BASE+0x007E00B0+&set %LE %Long (1<<14.)|(1<<15.)
	; Select DAP to LDSP and TGDSP and AGDSP
	D.S &mem_tpye:(&AON_BASE+0x007D0034) %LE %Long 0xF

	;clear iram
	D.S &mem_tpye:(&IRAM_BASE)--(&IRAM_BASE+0x5FF) %LE %Long 0x0
	
	; for LDSP
	; raise up TGDSP Freq. and set boot code
	GOSUB SET_DSP_BOOT_CODE &LDSP_OFFSET	

	; Disable Reg. Protection
	D.S &mem_tpye:(&AON_BASE+0x007D007C) %LE %Long 0x00009620

	; WTLCP SYS force on
	D.S &mem_tpye:&AON_BASE+0x007E0054+&clr %LE %Long 0x3<<24. 
	; WTLCP LDSP force on
	D.S &mem_tpye:&AON_BASE+0x007E003C+&clr %LE %Long 0x3<<24. 
	; WTLCP TDDSP force on
	D.S &mem_tpye:&AON_BASE+0x007E0040+&clr %LE %Long 0x3<<24. 

	; WTLCP Sleep CTRL
	D.S &mem_tpye:&AON_BASE+0x007E00CC+&clr %LE %Long 1<<17.

	D.S &mem_tpye:&AON_BASE+0x007D0150 %LE %Long ((0x30000000+&LDSP_OFFSET)/2)
	D.S &mem_tpye:&AON_BASE+0x007D0154+&set %LE %Long 0x1

	; for TGDSP
	GOSUB SET_DSP_BOOT_CODE &TGDSP_OFFSET

	D.S &mem_tpye:&AON_BASE+0x007D0158 %LE %Long ((0x30000000+&TGDSP_OFFSET)/2)
	D.S &mem_tpye:&AON_BASE+0x007D015C+&set %LE %Long 0x1

	; WTLCP SYS soft reset
	D.S &mem_tpye:&AON_BASE+0x007E00B0+&clr %LE %Long (1<<0.)|(1<<2.)
	; WTLCP Core soft reset
	D.S &mem_tpye:&AON_BASE+0x007E00B0+&clr %LE %Long (1<<14.)|(1<<15.)
	IF (&wait!=0)
	(
		PRINT "Waiting Boot ..."
		WHILE (DATA.LONG(&mem_tpye:(((&IRAM_BASE+&LDSP_OFFSET)+&ADD_TO_ADDR)+0x80))!=0xAAAAAAAA)
		(
			WAIT 1.MS
		)
		WHILE (DATA.LONG(&mem_tpye:(((&IRAM_BASE+&TGDSP_OFFSET)+&ADD_TO_ADDR)+0x80))!=0xAAAAAAAA)
		(
			WAIT 1.MS
		)		
		PRINT "Boot Done!"
	)

	IF (((DATA.LONG(&mem_tpye:(&AON_BASE+0x007E00C4))>>25.)&(0x1F))==0)
	(
		LOCAL &yes
		DIALOG.YESNO "AUDCP Already booted! Do you want to BOOT anyway?"
		ENTRY &yes
		IF (!&yes)
		(
			RETURN
		)
	)
	

	; for AGDSP	
	GOSUB SET_DSP_BOOT_CODE 0x200
	
	; AUDCP Core soft reset
	D.S &mem_tpye:&AON_BASE+0x007E00B0+&set %LE %Long (1<<10.)

	; Disable Reg. Protection
	D.S &mem_tpye:(&AON_BASE+0x007D0078) %LE %Long 0x00009620

	; AUDCP SYS force on
	D.S &mem_tpye:&AON_BASE+0x007E0060+&clr %LE %Long 0x3<<24. 
	; AUDCP AUDDSP force on
	D.S &mem_tpye:&AON_BASE+0x007E005C+&clr %LE %Long 0x3<<24. 

	; AUDCP Sleep CTRL
	D.S &mem_tpye:&AON_BASE+0x007E00CC+&clr %LE %Long 1<<19.

	D.S &mem_tpye:&AON_BASE+0x007D0140 %LE %Long ((0x30000000+&AGDSP_OFFSET)/2)
	D.S &mem_tpye:&AON_BASE+0x007D0144+&set %LE %Long 0x1

	; AUDCP SYS soft reset
	D.S &mem_tpye:&AON_BASE+0x007E00B0+&clr %LE %Long (1<<9.)
	; AUDCP Core soft reset
	D.S &mem_tpye:&AON_BASE+0x007E00B0+&clr %LE %Long  (1<<10.)

	IF (&wait!=0)
	(
		PRINT "Waiting Boot ..."
		WHILE (DATA.LONG(&mem_tpye:(((&IRAM_BASE+&AGDSP_OFFSET)+&ADD_TO_ADDR)+0x80))!=0xAAAAAAAA)
		(
			WAIT 1.MS
		)
		PRINT "Boot Done!"
	)

	RETURN
	

DDR_ERROR:
	ON ERROR
	PRINT %ERROR "Maybe your board's DDR is unstable! Please Make sure it! Thanks!"
	ENDDO

DISABLE_FIREWALL:
	D.S EZAXI:(0x32802000+&ADD_TO_ADDR) %LE %Long 0xFFFFFFFF 
	D.S EZAXI:(0x32802004+&ADD_TO_ADDR) %LE %Long 0x00000000
RETURN

write_boot_code:
	entry &code_addr &data0 &data1 &data2 &data3
	D.S &mem_tpye:(&code_addr) %LE %Long &data0
	D.S &mem_tpye:(&code_addr+0x4) %LE %Long &data1
	D.S &mem_tpye:(&code_addr+0x8) %LE %Long &data2
	D.S &mem_tpye:(&code_addr+0xc) %LE %Long &data3
	RETURN
	
SET_DSP_BOOT_CODE:
	entry &OFFSET_I
	LOCAL &CODE_BASE_I &DSP_BASE_I
	
;	plist
;	stop
	&CODE_BASE_I=(&IRAM_BASE+&OFFSET_I)
	&DSP_BASE_I=(0x30000000+&OFFSET_I)
    ;     P:18000100|D7E67300D7EE1320                                   mov  ##-0x2811ECE0,r0
    ;     P:18000104|D7E6DB0018000400                                   st   r0,[##0x18000400].dw
    ;     P:18000108|0000                                               nop
    ;     P:18000109|0000                                               nop
    ;     P:1800010A|D7E6730400000000                                   mov  ##0x0,r4
    ;     P:1800010E|D7E6730018000500                                   mov  ##0x18000500,r0
	;     P:18000112|6A28                                               movd (r0)+,(r4)+
	;     P:18000113|6A28                                               movd (r0)+,(r4)+
	;     ...
	;     P:18000127|6A28                                               movd (r0)+,(r4)+
	;     P:18000128|D7E67300AAAAAAAA                                   mov  ##-0x55555556,r0
	;     P:1800012C|D7E6DB0018000140                                   st   r0,[##0x18000140].dw
	;     P:18000130|D7EE1320FFFFFFFC                                   brr{nt}_0x18000130,true
	GOSUB write_boot_code (&CODE_BASE_I)      0xd7ee1320 0xd7e67300 0x18000400 0xd7e6db00
	GOSUB write_boot_code (&CODE_BASE_I+0x10) 0xd7e67304 0x0 0xd7e67300 0x0
	GOSUB write_boot_code (&CODE_BASE_I+0x20) 0x6a286a28 (((&DSP_BASE_I)+0x300)/2) 0x6a286a28 0x6a286a28
	GOSUB write_boot_code (&CODE_BASE_I+0x30) 0x6a286a28 0x6a286a28 0x6a286a28 0x6a286a28
	GOSUB write_boot_code (&CODE_BASE_I+0x40) 0x6a286a28 0x6a286a28 0x6a286a28 0x6a286a28
	
	;raise the freq for tgdsp
	GOSUB write_boot_code (&CODE_BASE_I+0x50) 0x3 0xd7e67300 (0x015D0020/2) 0xd7e6db00
	;write 0xAAAAAAAA to (&DSP_BASE_I)+0x80)
	GOSUB write_boot_code (&CODE_BASE_I+0x60) 0xAAAAAAAA 0xD7E67300 (((&DSP_BASE_I)+0x80)/2) 0xD7E6DB00
	;while(1)
	GOSUB write_boot_code (&CODE_BASE_I+0x70) 0xFFFFFFFC 0xd7ee1320 0x0 0x0
	;prepare while(1) data
	GOSUB write_boot_code (&CODE_BASE_I+0x300) 0x0000a700 0x0002a700 0x0004a700 0x0006a700
	GOSUB write_boot_code (&CODE_BASE_I+0x310) 0x0008a700 0x000aa700 0x000ca700 0x000ea700
	RETURN	
	