; A53 Dump
  LOCAL &temp &cur_path
  &temp=OS.PPD()
  &cur_path=STRing.Replace("&temp", "\", "/", 0)

  LOCAL &cmm_file &regcmm
  LOCAL &tmp &corenumber &core
  LOCAL &sys_store
  LOCAL &year &mounth &day &time &stamp
  LOCAL &dump_path &dialog_width &need_cache_dump &sym &regsave_dump
  
  IF "X&dump_path"=="X"
    &dump_path=VERSION.ENVironment(TMP)
  
  &year=DATE.YEAR()
  &mounth=DATE.MONTH()
  &day=DATE.DAY()
  &time=DATE.UnixTime()
  
  &year=STRING.CUT("&year",-1)
  &mounth=STRING.CUT("&mounth",-1)
  &day=STRING.CUT("&day",-1)
  &time=STRING.CUT("&time",-1)
  &stamp="&year"+"&mounth"+"&day"+"_"+"&time"
  &stamp="&stamp"
  
  &sys_store=1
  &need_cache_dump=1
  &regsave_dump=1

  IF STRing.SCAN(STRing.LoWeR(CPU()),"cortex",0)==0
    &sys_store=1


  &cmm_file="restore_"+"&stamp"+".cmm"
  &dialog_width=64.
  WinPOS ,,,,,, _a53dump_
  DIALOG.view
  (&
        HEADER "A53 Dump"

        POS  1.  1. 15.
        TEXT "DumpPath(RW):"
        POS 17.  1. &dialog_width-23.
DPATH:  EDIT "" "GOSUB set_item DPATH dump_path"
        POS &dialog_width-6 1. 2.
        BUTTON "..." "GOSUB browse_dumppath"

        POS  1. 3. 16.
        TEXT "Kernel Symbol File:"
        POS 17. 3. &dialog_width-23.
SYM:    EDIT "" "GOSUB set_item SYM sym"
        POS &dialog_width-6 3. 2.
        BUTTON "..." "GOSUB browse_sym"

        POS 1.  5. 2.
CBOX:   CHECKBOX "" "GOSUB set_cachebox"
        POS 4.  5. 15.
        TEXT "CacheDump"

        POS 20.  5. 2.
RBOX:   CHECKBOX "" "GOSUB set_regbox"
        POS 23.  5. 15.
        TEXT "RegSave"

        POS &dialog_width-17. 3.+2. 10. 1.
START:  BUTTON "STORE" "jumpto startme"
        CLOSE "jumpto winclose"
  )
  
  
  DIALOG.Set DPATH "&dump_path" 
  DIALOG.Set SYM "&sym"
  DIALOG.Set CBOX
  DIALOG.Set RBOX

  STOP

winclose:
  DIALOG.END
  ENDDO


ENDDO

startme:
  DIALOG.END
  GOSUB a53_dump
  ENDDO

set_item:
    LOCAL &str &label &item &assignment
    ENTRY &label &item
    &str=DIALOG.STRing(&label)
    &assignment="&"+"&item"+"="+"""&str"""
    &assignment
    RETURN
set_cachebox:
  IF !DIALOG.BOOLEAN(CBOX)
  (
      &need_cache_dump=0
  )
  ELSE
  (
      &need_cache_dump=1
  )
  RETURN
set_regbox:
  IF !DIALOG.BOOLEAN(RBOX)
  (
      &regsave_dump=0
  )
  ELSE
  (
      &regsave_dump=1
  )
  RETURN

browse_sym:
  LOCAL &str
  &str=DIALOG.STRing(SYM)
  &str=OS.FILE.PATH("&str")
  IF "&str"!=""
    &str="&str/*.*"
  DIALOG.File "&str"
  ENTRY %LINE &str
  IF "&str"==""
    RETURN
  &sym="&str"
  DIALOG.Set SYM "&str"
RETURN

browse_dumppath:
  LOCAL &str
  DIALOG.DIR "&dump_path/*"
  ENTRY %LINE &str
  IF "&str"==""
    RETURN
  &dump_path="&str"
  DIALOG.Set DPATH "&str"
RETURN

a53_dump:
  IF (OS.FILE("&sym"))
    Data.LOAD "&sym" /NoCODE
  IF STATE.RUN()
  (
    &result
    DIALOG.YESNO "Target running, cannot save RAM Dump!" "Stop the target and continue?"
    ENTRY &result
    IF &result
      Break.direct
    ELSE
      RETURN
  )
  IF !(OS.DIR("&dump_path"))
  (
    PRINT %ERROR "Dump PATH not Exist! &dump_path"
  )
  ELSE
  (
    IF !(OS.DIR.ACCESS("&dump_path", "wca"))
    (
      PRINT %ERROR "Dump PATH Must be writeable! &dump_path"
    )
    OS.Command "CD &dump_path && MKDIR &stamp"
    &dump_path="&dump_path/&stamp"
    WHILE !(OS.DIR("&dump_path"))
    (
        CONTINUE
    )
  )
  IF STATE.RUN()&&(&regsave_dump==1)
  (
    PRINT "Can't Break, Do Register Save ONLY!"
    GOSUB RegSaveDump
    RETURN
  )
  IF !(sYmbol.EXIST(start_kernel))
  (
     PRINT %ERROR "Not load vmlinux!"
  )
  OPEN #1 "&dump_path/&cmm_file" /Create
  WRITE #1 "RESet"
  IF &sys_store==1
  (
      STOre "&dump_path/ramdump_sys_&stamp.cmm" SYStem
      WRITE #1 "ON.ERROR CONTINUE ; some saved commands could be not supported for the simulator"
      WRITE #1 "DO &dump_path/ramdump_sys_&stamp.cmm"
      WRITE #1 "ON.ERROR nothing"
  )
  ELSE
  (
      WRITE #1 "SYStem.CPU " CPU() 
      WRITE #1 "SYStem.Option MMUSPACES ON"
      IF CORENUMBER()<CONFIGNUMBER()
      (
        LOCAL &assignment &core
        &core=1.
        RePeaT CONFIGNUMBER()
        (
          IF CORE.ISASSIGNED(&core)
            &assignment="&assignment"+" &core"
          &core=&core+1.
        )
        IF "&assignment"!=""
          WRITE #1 "CORE.ASSIGN &assignment"
      )
      WRITE #1 "SYStem.Up"
  )
  WRITE #1 ""
  
  &regcmm="&dump_path/&stamp"+"_regs"
  
  GOSUB SaveRegisters

  GOSUB GetSpecialRegisters
  
  IF CORENUMBER()>1
  (
    CORE 0
    WRITE #1 "CORE 0"
    WRITE #1 ""
  )

  WRITE #1 ""
  
  IF CORENUMBER()==1
    WRITE #1 "do &regcmm"
  ELSE
  (
    &core=0.
    RePeat
    (
      LOCAL &tmp
      CORE &core
      &tmp="&regcmm"+"_core"+"&core"+"cmm"
      WRITE #1 "CORE &core"
      WRITE #1 "DO " "&tmp"
      &core=&core+1.
    )
    WHILE &core<CORENUMBER()
    IF (CORENUMBER()>1)
      CORE 0
    WRITE #1 "CORE 0"
  )
  CLOSE #1


  GOSUB StackDump
  IF &need_cache_dump==1.
  (
    GOSUB CacheDump
  )
  PRINT "Dump Done!"

  RETURN


StackDump:
  PRinter.FileType ASCII
  IF CORENUMBER()==1
  (
    PRinter.File "&dump_path\StackDump_&stamp.txt"
    WinPrint.Frame /Args /Locals /Caller
  )
  ELSE
  (
    &core=0.
    RePeat
    (
      PRinter.File "&dump_path\StackDump_&(stamp)_core&(core).txt"
      WinPrint.Frame /Args /Locals /Caller /Core &core
      &core=&core+1.
    )
    WHILE &core<CORENUMBER()
    IF (CORENUMBER()>1)
      CORE 0
  )
  RETURN

CacheDump:
  PRinter.FileType ASCII
  IF CORENUMBER()==1
  (
    PRinter.File "&dump_path\CacheDump_&(stamp)_IC.txt"
    WinPrint.CACHE.DUMP IC
    PRinter.File "&dump_path\CacheDump_&(stamp)_DC.txt"
    WinPrint.CACHE.DUMP DC
  )
  ELSE
  (
    &core=0.
    RePeat
    (
      CORE &core
      PRinter.File "&dump_path\CacheDump_&(stamp)_core&(core)_IC.txt"
      WinPrint.CACHE.DUMP IC
      PRinter.File "&dump_path\CacheDump_&(stamp)_core&(core)_DC.txt"
      WinPrint.CACHE.DUMP DC
      &core=&core+1.
    )
    WHILE &core<2
    IF (CORENUMBER()>1)
      CORE 0
  )
  RETURN

RegSaveDump:
  PRinter.FileType ASCII
  PRinter.File "&dump_path\RegSave_&(stamp).txt"
  DO "&cur_path\regsave.cmm"
  WinPrint.AREA.VIEW Register
  RETURN

; --------------------------------------------------------------------------------
; Save the CPU registers
; --------------------------------------------------------------------------------
SaveRegisters:
  IF CORENUMBER()==1
  (
    LOCAL &tmp
    &tmp="&regcmm"
    STOre &tmp Register
    RETURN
  )
  LOCAL &core
  &core=0.
  RePeat
  (
    LOCAL &tmp
    CORE &core
    &tmp="&regcmm"+"_core"+"&core"+"cmm"
    STOre &tmp Register
    &core=&core+1.
  )
  WHILE &core<CORENUMBER()
  IF (CORENUMBER()>1)
    CORE 0
  RETURN


; --------------------------------------------------------------------------------
; Get the ARM MMU registers
; --------------------------------------------------------------------------------
GetArmMmuRegs:
  &core=0.
  RePeaT
  (
    LOCAL &CPSR_M
    IF CORENUMBER()>1
    (
      CORE &core
      WRITE #1 "CORE &core"
    )
    
    &CPSR_M=Register(M)
    IF (Register(M)&0x10)==0x10                     ; AArch32
    (
      IF CPU.FEATURE(SECURE)
      (
        IF (Register(NS)==0.)||(Register(M)==0x16)      ; Secure PL1 or mon?
        (
          WRITE #1 "Data.Set C15:0x11 " Data.Long(C15:0x11) ; SCR
        )
      )
      WRITE #1 "Data.Set C15:0x1 " Data.Long(C15:0x1)     ; SCTLR
      WRITE #1 "Data.Set C15:0x202 " Data.Long(C15:0x202) ; TTBCR
      IF (Data.Long(C15:0x202)&0x80000000)==0       ; LPAE enabled ?
      (
        WRITE #1 "Data.Set C15:0x2 " Data.Long(C15:0x2)     ; TTBR0
        WRITE #1 "Data.Set C15:0x102 " Data.Long(C15:0x102) ; TTBR1
        WRITE #1 "Data.Set C15:0x2A " Data.Long(C15:0x2A)   ; PRRR
        WRITE #1 "Data.Set C15:0x12A " Data.Long(C15:0x12A) ; NMRR
      )
      ELSE
      (
        WRITE #1 "Data.Set C15:0x10020 " Data.QUAD(C15:0x10020)  ; TTBR0_LPAE
        WRITE #1 "Data.Set C15:0x11020 " Data.QUAD(C15:0x11020)  ; TTBR1_LPAE
        WRITE #1 "Data.Set C15:0x2A " Data.Long(C15:0x2A)        ; MAIR0
        WRITE #1 "Data.Set C15:0x12A " Data.Long(C15:0x12A)      ; MAIR1
      )
      IF CPU.FEATURE(HYPERVISOR)
      (
        WRITE #1 "Data.Set HC15:0x4001 "  Data.Long(HC15:0x4001)  ; HSCTLR
        WRITE #1 "Data.Set HC15:0x4011 "  Data.Long(HC15:0x4011)  ; HCR
        WRITE #1 "Data.Set HC15:0x14020 " Data.QUAD(HC15:0x14020) ; HTTBR
        WRITE #1 "Data.Set HC15:0x4202 "  Data.Long(HC15:0x4202)  ; HTCR
        WRITE #1 "Data.Set HC15:0x402A "  Data.Long(HC15:0x402A)  ; HMAIR0
        WRITE #1 "Data.Set HC15:0x412A "  Data.Long(HC15:0x412A)  ; HMAIR1
        WRITE #1 "Data.Set HC15:0x16020 " Data.QUAD(HC15:0x16020) ; VTTBR
        WRITE #1 "Data.Set HC15:0x4212 "  Data.Long(HC15:0x4212)  ; VTCR
      )
    )
    ELSE
    (
      IF CPU.FEATURE(SECURE)
        Register.Set M 0xD
      ELSE IF CPU.FEATURE(HYPERVISOR)
        Register.Set M 0x9
      ELSE
        Register.Set M 0x5
      IF CPU.FEATURE(SECURE)
      (
        WRITE #1 "Data.Set SPR:0x36100 %Quad " Data.QUAD(SPR:0x36100)  ; TTBR0_LPAE
        WRITE #1 "Data.Set SPR:0x36202 %Quad " Data.QUAD(SPR:0x36202)  ; TCR_EL3
        WRITE #1 "Data.Set SPR:0x36200 %Quad " Data.QUAD(SPR:0x36200)  ; TTBR0_EL3
        WRITE #1 "Data.Set SPR:0x36A20 %Quad " Data.QUAD(SPR:0x36A20)  ; MAIR_EL3
        WRITE #1 "Data.Set SPR:0x36110 %Quad " Data.QUAD(SPR:0x36110)  ; SCR_EL3
      )
      IF CPU.FEATURE(HYPERVISOR)
      (
        WRITE #1 "Data.Set SPR:0x34100 %Quad " Data.QUAD(SPR:0x34100)  ; SCTLR_EL2
        WRITE #1 "Data.Set SPR:0x34202 %Quad " Data.QUAD(SPR:0x34202)  ; TCR_EL2
        WRITE #1 "Data.Set SPR:0x34200 %Quad " Data.QUAD(SPR:0x34200)  ; TTBR0_EL2
        WRITE #1 "Data.Set SPR:0x34A20 %Quad " Data.QUAD(SPR:0x34A20)  ; MAIR_EL2
        WRITE #1 "Data.Set SPR:0x34110 %Quad " Data.QUAD(SPR:0x34110)  ; HCR_EL2
        WRITE #1 "Data.Set SPR:0x34210 %Quad " Data.QUAD(SPR:0x34210)  ; VTTBR_EL2
        WRITE #1 "Data.Set SPR:0x34212 %Quad " Data.QUAD(SPR:0x34212)  ; VTCR_EL2
      )
      IF (Register(M)&0xC)>=4
      (
        WRITE #1 "Data.Set SPR:0x30100 %Quad " Data.QUAD(SPR:0x30100)  ; SCTLR_EL1
        WRITE #1 "Data.Set SPR:0x30202 %Quad " Data.QUAD(SPR:0x30202)  ; TCR_EL1
        WRITE #1 "Data.Set SPR:0x30200 %Quad " Data.QUAD(SPR:0x30200)  ; TTBR0_EL1
        WRITE #1 "Data.Set SPR:0x30201 %Quad " Data.QUAD(SPR:0x30201)  ; TTBR1_EL1
        WRITE #1 "Data.Set SPR:0x30A20 %Quad " Data.QUAD(SPR:0x30A20)  ; MAIR_EL1
      )
    )
    Register.Set M &CPSR_M
    WRITE #1 ""
    &core=&core+1.
  )
  WHILE &core<CORENUMBER()
  RETURN


GetSpecialRegisters:

    GOSUB GetArmMmuRegs


  RETURN
  
